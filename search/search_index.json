{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Kubernetes Ramp-up Welcome A long, long time ago in a land not so far away, all programs on a computer lived together. They shared the same resources and privileges. If they were lucky, the operating system assigned CPU time fairly to each task. If they weren\u2019t so lucky, they\u2019d have to wait for competing tasks to give way. Some tasks demanded root privileges, whether they deserved them or not. Others had arcane dependencies. Crucially, for us as developers, a framework, library, or tool would often demand a dependency that was incompatible with the version required by some other framework, library, or tool that we needed elsewhere. These were dark times, friend. Then came a solution. Containers and orchestrators. This ramp-up is presented with a theoretical and a practical component that will help to undestand what is kubernetes, why is it useful, why people is using kubernetes in the industry, how is kubernetes componed and how does it works. We highly recomend that if you don't know about containers, learn about it first before coming to this rampup.","title":"Home"},{"location":"#kubernetes-ramp-up","text":"","title":"Kubernetes Ramp-up"},{"location":"#welcome","text":"A long, long time ago in a land not so far away, all programs on a computer lived together. They shared the same resources and privileges. If they were lucky, the operating system assigned CPU time fairly to each task. If they weren\u2019t so lucky, they\u2019d have to wait for competing tasks to give way. Some tasks demanded root privileges, whether they deserved them or not. Others had arcane dependencies. Crucially, for us as developers, a framework, library, or tool would often demand a dependency that was incompatible with the version required by some other framework, library, or tool that we needed elsewhere. These were dark times, friend. Then came a solution. Containers and orchestrators. This ramp-up is presented with a theoretical and a practical component that will help to undestand what is kubernetes, why is it useful, why people is using kubernetes in the industry, how is kubernetes componed and how does it works. We highly recomend that if you don't know about containers, learn about it first before coming to this rampup.","title":"Welcome"},{"location":"deploy_a_kubernetes_cluster/","text":"Deploy a Kubernetes Cluster This chapter objective is to deploy the kubernetes cluster that will be used in the next steps of the rampup application. Is important to deploy a cluster from scratch since this will give more undestanding of where are the applications deployed, which are my nodes, how do kubernetes manages those nodes and distributes pods across those nodes. For completing this chapter you'll need to show your deployed cluster. This can be done in th cloud using a kubernetes cloud service as EKS in AWS or AKS in Azure; or it can be deployed locally on a virtual machine using mini-kube, both options are valid. For deploying a local cluster for testing purposes using minikube, we recommend to follow this video from minute 34:47 to 1:02:03","title":"Deploy a Cluster"},{"location":"deploy_a_kubernetes_cluster/#deploy-a-kubernetes-cluster","text":"This chapter objective is to deploy the kubernetes cluster that will be used in the next steps of the rampup application. Is important to deploy a cluster from scratch since this will give more undestanding of where are the applications deployed, which are my nodes, how do kubernetes manages those nodes and distributes pods across those nodes. For completing this chapter you'll need to show your deployed cluster. This can be done in th cloud using a kubernetes cloud service as EKS in AWS or AKS in Azure; or it can be deployed locally on a virtual machine using mini-kube, both options are valid. For deploying a local cluster for testing purposes using minikube, we recommend to follow this video from minute 34:47 to 1:02:03","title":"Deploy a Kubernetes Cluster"},{"location":"deploy_application_in_k8s/","text":"Deploy an Application in Kubernetes This chapter will address the deployment of our first application in a Kubernetes cluster. We have selected the deployment of a Mongo Express and a Mongo DB that best align with the content given in the previous chapters. At the end of this chapter you should be able to understand and deploy: A Deployment A Service A LoadBalancer An ingress A Secret A ConfigMap A DB inside Kubernet Objetives: * Deploy a Mongo DB in Kubernetes * Deploy Mongo Express in Kubernetes * Connect the Mongo Express to the Mongo DB using corectly Kubernetes Secrets If you need help and guidance on this process you can watch the following video from 1:16:16 to 1:46:16","title":"Deploy an Application"},{"location":"deploy_application_in_k8s/#deploy-an-application-in-kubernetes","text":"This chapter will address the deployment of our first application in a Kubernetes cluster. We have selected the deployment of a Mongo Express and a Mongo DB that best align with the content given in the previous chapters. At the end of this chapter you should be able to understand and deploy: A Deployment A Service A LoadBalancer An ingress A Secret A ConfigMap A DB inside Kubernet Objetives: * Deploy a Mongo DB in Kubernetes * Deploy Mongo Express in Kubernetes * Connect the Mongo Express to the Mongo DB using corectly Kubernetes Secrets If you need help and guidance on this process you can watch the following video from 1:16:16 to 1:46:16","title":"Deploy an Application in Kubernetes"},{"location":"kubernetes_and_the_need_of_containers/","text":"Kubernetes and the Need for Containers Before starting this ramp-up we recommend to learn before the concept of containers, since kubernetes is a tool that helps you to orchestrate containers and for understanding kubernetes and performing the challenges that this ramp-up propose you'll need to know what containers are, why we use them and how they work. The next reading briefly overviews the topic. A container is a mini-virtual machine. It is small, as it does not have device drivers and all the other components of a regular virtual machine. Docker is by far the most popular container and it is written in Linux. Microsoft also has added containers to Windows as well, because they have become so popular. The best way to illustrate why this is useful and important is to give an example. Suppose you want to install the nginx web server on a Linux server. You have several ways to do that. First, you could install it directly on the physical server\u2019s OS. But most people use virtual machines now, so you would probably install it there. But setting up a virtual machine requires some administrative effort and cost as well. And machines will be underutilized if you just dedicate it for just one task, which is how people typically use VMs. It would be better to load that one machine up with nginx, messaging software, a DNS server, etc. The people who invented containers thought through these issues and reasoned that since nginx or any other application just needs some bare minimum operating system to run, then why not make a stripped down version of an OS, put nginx inside, and run that. Then you have a self-contained, machine-agnostic unit that can be installed anywhere. Now containers are so popular than they threaten to make VMs obsolete, is what some people say. Docker Hub But making the container small is not the only advantage. The container can be deployed just like a VM template, meaning an application that is ready to go that requires little or no configuration. There are thousands of preconfigured Docker images at the Dockerhub public repository. There, people have taken the time to assemble opensource software configurations that might take someone else hours or days to put together. People benefit from that because they can install nginx or even far more complicated items simply by downloading them from there. For example, this one line command will down, install, and start Apache Spark with Jupyter notebooks (iPython): docker run -d -p 8888:8888 jupyter/all-spark-notebook As you can see it is running on port 8888. So you could install something else on another port or even install a second instance of Spark and Jupyter. On the Need for Orchestration Now, there is an inherent problem with containers, just like there is with virtual machines. That is the need to keep track of them. When public cloud companies bill you for CPU time or storage then you need to make sure you do not have any orphaned machines spinning out there doing nothing. Plus there is the need to automatically spin up more when a machine needs more memory, CPU, or storage, as well as shut them down when the load lightens. Orchestration tackles these problems. This is where Kubernetes comes in.","title":"The Need of Containers"},{"location":"kubernetes_and_the_need_of_containers/#kubernetes-and-the-need-for-containers","text":"Before starting this ramp-up we recommend to learn before the concept of containers, since kubernetes is a tool that helps you to orchestrate containers and for understanding kubernetes and performing the challenges that this ramp-up propose you'll need to know what containers are, why we use them and how they work. The next reading briefly overviews the topic. A container is a mini-virtual machine. It is small, as it does not have device drivers and all the other components of a regular virtual machine. Docker is by far the most popular container and it is written in Linux. Microsoft also has added containers to Windows as well, because they have become so popular. The best way to illustrate why this is useful and important is to give an example. Suppose you want to install the nginx web server on a Linux server. You have several ways to do that. First, you could install it directly on the physical server\u2019s OS. But most people use virtual machines now, so you would probably install it there. But setting up a virtual machine requires some administrative effort and cost as well. And machines will be underutilized if you just dedicate it for just one task, which is how people typically use VMs. It would be better to load that one machine up with nginx, messaging software, a DNS server, etc. The people who invented containers thought through these issues and reasoned that since nginx or any other application just needs some bare minimum operating system to run, then why not make a stripped down version of an OS, put nginx inside, and run that. Then you have a self-contained, machine-agnostic unit that can be installed anywhere. Now containers are so popular than they threaten to make VMs obsolete, is what some people say. Docker Hub But making the container small is not the only advantage. The container can be deployed just like a VM template, meaning an application that is ready to go that requires little or no configuration. There are thousands of preconfigured Docker images at the Dockerhub public repository. There, people have taken the time to assemble opensource software configurations that might take someone else hours or days to put together. People benefit from that because they can install nginx or even far more complicated items simply by downloading them from there. For example, this one line command will down, install, and start Apache Spark with Jupyter notebooks (iPython): docker run -d -p 8888:8888 jupyter/all-spark-notebook As you can see it is running on port 8888. So you could install something else on another port or even install a second instance of Spark and Jupyter. On the Need for Orchestration Now, there is an inherent problem with containers, just like there is with virtual machines. That is the need to keep track of them. When public cloud companies bill you for CPU time or storage then you need to make sure you do not have any orphaned machines spinning out there doing nothing. Plus there is the need to automatically spin up more when a machine needs more memory, CPU, or storage, as well as shut them down when the load lightens. Orchestration tackles these problems. This is where Kubernetes comes in.","title":"Kubernetes and the Need for Containers"},{"location":"kubernetes_components/","text":"Kubernetes Components This chapter of the ramp up is intended to clarify deeply the kubernetes components. previously we review some kubernetes components but there're more components and it's important to know how they work since with this components we will be working. This chapter is optional and it doesn't have any deliverable but we highly recomend to complete the chapter since the information given here will be needed later. For completing this chapter you'll need to watch the following video: Important concetps of the chapter: * Kubernetes: Node and Pod * Kubernetes: Service and Ingress * Kubernetes: ConfigMap and Secret * Kubernetes: Volumes * Kubernetes: Deployment and StatefulSet","title":"Kubernetes Components"},{"location":"kubernetes_components/#kubernetes-components","text":"This chapter of the ramp up is intended to clarify deeply the kubernetes components. previously we review some kubernetes components but there're more components and it's important to know how they work since with this components we will be working. This chapter is optional and it doesn't have any deliverable but we highly recomend to complete the chapter since the information given here will be needed later. For completing this chapter you'll need to watch the following video: Important concetps of the chapter: * Kubernetes: Node and Pod * Kubernetes: Service and Ingress * Kubernetes: ConfigMap and Secret * Kubernetes: Volumes * Kubernetes: Deployment and StatefulSet","title":"Kubernetes Components"},{"location":"kubernetes_onboarding/","text":"Kubernetes Onboarding This chapter of the rampup is the first approach to kubernetes and its objective is to focus the student and provide him with the basic knowledge necessary to be able to carry out the practical exercises proposed later in the rampup. For completing this chapter watch the following video: At the end of this chapter the student should be able to answer the following questions: * What is kubernetes ? * What problems does Kubernetes solve ? * Why there's a need of an orchestration tool ? * What feature a orchestrator tool offers ? * How does a Kubernetes basic architecture looks like ? * Explain each of the components of the previous architecture * Basic concepts: Pods, Containers, Services. What is the role of each ?","title":"Kubernetes Onboarding"},{"location":"kubernetes_onboarding/#kubernetes-onboarding","text":"This chapter of the rampup is the first approach to kubernetes and its objective is to focus the student and provide him with the basic knowledge necessary to be able to carry out the practical exercises proposed later in the rampup. For completing this chapter watch the following video: At the end of this chapter the student should be able to answer the following questions: * What is kubernetes ? * What problems does Kubernetes solve ? * Why there's a need of an orchestration tool ? * What feature a orchestrator tool offers ? * How does a Kubernetes basic architecture looks like ? * Explain each of the components of the previous architecture * Basic concepts: Pods, Containers, Services. What is the role of each ?","title":"Kubernetes Onboarding"}]}